// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc3824.CompetitionRobot.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc3824.CompetitionRobot.Constants;
import org.usfirst.frc3824.CompetitionRobot.Robot;

/**
 *
 */
public class ChassisTurnAngle extends Command
{
    private double degreesToTurn = 0;
    private boolean anglePassed;
    public double initialAngle;

    public ChassisTurnAngle(double turnAngle)
    {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drivetrain);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        degreesToTurn = turnAngle;
        anglePassed = true;
    }

    public ChassisTurnAngle()
    {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drivetrain);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=
        this.anglePassed = false;
    }

    // Called just before this Command runs the first time
    protected void initialize()
    {
        initialAngle = Robot.drivetrain.getGyro().pidGet();

        // Set angle for turning
        Robot.drivetrain.getAngleGyroController().setPID(Constants.DrivetrainAngleGyroControllerTurnP, Constants.DrivetrainAngleGyroControllerTurnI, Constants.DrivetrainAngleGyroControllerTurnD);

        // set the target turn position
        if (!anglePassed) //degreesToTurn = SmartDashboard::GetNumber("Chassis Turn Angle Degrees");
        {
            degreesToTurn = 10.0;
        }

        double goToGyro = (degreesToTurn + Robot.drivetrain.getGyro().getAngle());
        Robot.drivetrain.getAngleGyroController().reset();
        Robot.drivetrain.getAngleGyroController().setAbsoluteTolerance(Constants.TURN_THRESHOLD);
        Robot.drivetrain.getAngleGyroController().setSetpoint(goToGyro);
        Robot.drivetrain.getAngleGyroController().enable();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute()
    {
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished()
    {
        //return PIDcontroller.OnTarget();
        return Math.abs(Robot.drivetrain.getAngleGyroController().getSetpoint() - Robot.drivetrain.getGyro().pidGet()) < Constants.TURN_THRESHOLD;
    }

    // Called once after isFinished returns true
    protected void end()
    {
        // disable the PID controller
        Robot.drivetrain.getAngleGyroController().disable();
        Robot.drivetrain.holonomicDrive(0.0, 0.0, 0.0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted()
    {
        end();
    }
}
