// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc3824.CompetitionRobot.commands;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc3824.CompetitionRobot.Robot;
/**
 *
 */
public class AutonomousCommand extends Command
{
    private Timer time;
    private double DriveDuration;
    private double DrivePower;
    private double DriveDirection;
    public AutonomousCommand()
    {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drivetrain);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drivetrain);
        DriveDuration = 1.0;
        DrivePower = 0.3;
        DriveDirection = 0;
        time = new Timer();
    }
    // Called just before this Command runs the first time
    protected void initialize()
    {
        time.reset();
        time.start();
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute()
    {
        Robot.drivetrain.straightHolonomicDrive(0, -0.3, 0);
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished()
    {
        SmartDashboard.putNumber("Time", time.get());
        if (time.get() > DriveDuration)
        {
            return true;
        }
        return false;
    }
    // Called once after isFinished returns true
    protected void end()
    {
        Robot.drivetrain.holonomicDrive(0, 0, 0);
        time.stop();
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted()
    {
        this.end();
    }
}
