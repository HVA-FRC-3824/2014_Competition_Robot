// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3824.CompetitionRobot.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.WaitUntilCommand;
import org.usfirst.frc3824.CompetitionRobot.Robot;

/**
 *
 */
public class  DelayIfTargetNotHot extends Command {

    protected int m_whichTarget;
    protected double m_delayUntil;
    protected Command driver;
    
    public DelayIfTargetNotHot() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    
    public DelayIfTargetNotHot(int whichTarget, double delayUntil)
    {
        m_whichTarget = whichTarget;
        m_delayUntil = delayUntil;
    }

    // Called just before this Command runs the first time
    protected void initialize() {
        if(m_whichTarget != Robot.hotGoalInfo.hotTarget)
        {
            // wait until 'delayUntil' time after the Autonomous starts.
            driver = new WaitUntilCommand(m_delayUntil);  // delay
            System.out.println("DelayIfTargetNotHot - DELAY");
        }
        else
        {
            // to keep symmetry so additional tests for null are not needed later,
            // create a delay command object, but set the start time to a value already
            // in the past, so there will effectively be no delay
            driver = new WaitUntilCommand(0.0);          
            System.out.println("DelayIfTargetNotHot - No Delay");
       }
       driver.start();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return !driver.isRunning();
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
