// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc3824.CompetitionRobot;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc3824.CompetitionRobot.commands.*;
/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI
{
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton joystickShoot;
    public JoystickButton joystickShooterUp;
    public JoystickButton joystickShooterDown;
    public JoystickButton joystickToggleMainVacuum;
    public JoystickButton mainVacuumOn;
    public JoystickButton mainVacuumOff;
    public Joystick driveJoystick;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public OI()
    {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveJoystick = new Joystick(1);
        
        mainVacuumOff = new JoystickButton(driveJoystick, 11);
        mainVacuumOff.whenPressed(new VacuumOff());
        mainVacuumOn = new JoystickButton(driveJoystick, 9);
        mainVacuumOn.whenPressed(new VacuumOn());
        joystickToggleMainVacuum = new JoystickButton(driveJoystick, 8);
        joystickToggleMainVacuum.whenPressed(new VacuumToggle());
        joystickShooterDown = new JoystickButton(driveJoystick, 6);
        joystickShooterDown.whileHeld(new ShooterAngleDown());
        joystickShooterUp = new JoystickButton(driveJoystick, 5);
        joystickShooterUp.whileHeld(new ShooterAngleUp());
        joystickShoot = new JoystickButton(driveJoystick, 1);
        joystickShoot.whenPressed(new CannonShoot());
	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Autonomous Drive to Right Box from Center", new AutonomousDrivetoRightBoxfromCenter());
        SmartDashboard.putData("Autonomous Drive to Left Box from Center", new AutonomousDrivetoLeftBoxfromCenter());
        SmartDashboard.putData("Cannon Shoot", new CannonShoot());
        SmartDashboard.putData("Shooter Angle Up", new ShooterAngleUp());
        SmartDashboard.putData("Shooter Angle Down", new ShooterAngleDown());
        SmartDashboard.putData("Set Shooter Angle", new SetShooterAngle());
        SmartDashboard.putData("Teleoperated", new Teleoperated());
        SmartDashboard.putData("ChassisTurnAngle", new ChassisTurnAngle());
        SmartDashboard.putData("ChassisDriveStraight", new ChassisDriveStraight());
        SmartDashboard.putData("Update PID", new UpdatePID());
        SmartDashboard.putData("VacuumOn", new VacuumOn());
        SmartDashboard.putData("VacuumToggle", new VacuumToggle());
        SmartDashboard.putData("VacuumOff", new VacuumOff());
        SmartDashboard.putData("PickupBallIn", new PickupBallIn());
        SmartDashboard.putData("PickupBallOut", new PickupBallOut());
        SmartDashboard.putData("PickupBallStop", new PickupBallStop());
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=
        
        DigitalIOButton m_shooterAnglePickup = new DigitalIOButton(Constants.SHOOTER_ANGLE_PICKUP);
	m_shooterAnglePickup.whenPressed(new SetShooterAngle(10.2));
	m_shooterAnglePickup.whenPressed(new SetShooterAngle(Constants.SHOOTER_PICKUP_POSITION));
        DigitalIOButton m_shooterAnglePass = new DigitalIOButton(Constants.SHOOTER_ANGLE_PASS);
	m_shooterAnglePass.whenPressed(new SetShooterAngle(19));
	m_shooterAnglePass.whenPressed(new SetShooterAngle(Constants.SHOOTER_PASS_POSITION));
        DigitalIOButton m_shooterAngleShoot = new DigitalIOButton(Constants.SHOOTER_ANGLE_SHOOT);
	m_shooterAngleShoot.whenPressed(new SetShooterAngle(28));
	m_shooterAngleShoot.whenPressed(new SetShooterAngle(Constants.SHOOTER_LONG_SHOT_POSITION));
        
        DigitalIOButton m_shooterAngleCorner = new DigitalIOButton(Constants.SHOOTER_ANGLE_CORNER);
	m_shooterAngleCorner.whenPressed(new SetShooterAngle(Constants.SHOOTER_CORNER_POSITION));
        DigitalIOButton m_shooterAngleAngledCorner = new DigitalIOButton(Constants.SHOOTER_ANGLE_ANGLED_CORNER);
	m_shooterAngleAngledCorner.whenPressed(new SetShooterAngle(Constants.SHOOTER_ANGLED_CORNER_POSITION));
      
        DigitalIOButton m_pickupIn = new DigitalIOButton(Constants.INPUT_PICKUP_IN);
        m_pickupIn.whileHeld(new PickupBallIn());
        m_pickupIn.whenReleased(new PickupBallStop());
        
        DigitalIOButton m_pickupOut = new DigitalIOButton(Constants.INPUT_PICKUP_OUT);
        m_pickupOut.whileHeld(new PickupBallOut());
        m_pickupOut.whenReleased(new PickupBallStop());
        
        DigitalIOButton m_vacuum = new DigitalIOButton(Constants.INPUT_VACUUM_TOGGLE);
        m_vacuum.whenPressed(new VacuumOn());
        m_vacuum.whenReleased(new VacuumOff());
        
        DigitalIOButton m_cannonShoot = new DigitalIOButton(Constants.INPUT_CANNON_SHOOT);
	m_cannonShoot.whenPressed(new CannonShoot());	
        SmartDashboard.putData("LocateHotGoal", new LocateHotGoal());
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriveJoystick() {
        return driveJoystick;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
