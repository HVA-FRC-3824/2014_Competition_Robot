// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc3824.CompetitionRobot.subsystems;
import org.usfirst.frc3824.CompetitionRobot.RobotMap;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import org.usfirst.frc3824.CompetitionRobot.Constants;
import org.usfirst.frc3824.CompetitionRobot.commands.Teleoperated;
/**
 *
 */
public class Drivetrain extends Subsystem
{
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController frontRight = RobotMap.drivetrainFrontRight;
    SpeedController frontLeft = RobotMap.drivetrainFrontLeft;
    SpeedController rearRight = RobotMap.drivetrainRearRight;
    SpeedController rearLeft = RobotMap.drivetrainRearLeft;
    RobotDrive holonomicDrive = RobotMap.drivetrainHolonomicDrive;
    Gyro gyro = RobotMap.drivetrainGyro;
    AnalogChannel ultrasonicFront = RobotMap.drivetrainUltrasonicFront;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private AnglePIDOutput angleOutput = new AnglePIDOutput();
    private PIDController angleGyroController
            = new PIDController(Constants.DrivetrainAngleGyroControllerP,
                    Constants.DrivetrainAngleGyroControllerI,
                    Constants.DrivetrainAngleGyroControllerD,
                    gyro, angleOutput);
    //PIDController powerUltSndController = new PIDController(Kp, Ki, Kd, , angleOutput);
    //used as the value for drive while running under PIDControl. Those values
    //not set by the controller can be set by a command directly
    private double magnitude;
    private double direction;
    private double angle;
    private static double UNITS_TO_INCHES = 0.544124212;
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand()
    {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new Teleoperated());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
        //setDefaultCommand(new DriveStraight(1, 1));
    }
    public void holonomicDrive(Joystick joy)
    {
        holonomicDrive.mecanumDrive_Polar(joy.getMagnitude(),
                joy.getDirectionDegrees(), joy.getTwist() * 0.5);
    }
    public void holonomicDrive(double magnitude, double direction, double angle)
    {
        holonomicDrive.mecanumDrive_Polar(magnitude, direction, angle);
    }
    public void straightHolonomicDrive(double x, double y, double rotation)
    {
        holonomicDrive.mecanumDrive_Cartesian(x, y, rotation, gyro.getAngle());
    }
    public double getFrontDistance()
    {
        return ultrasonicFront.getValue() * UNITS_TO_INCHES;
    }
    public Gyro getGyro()
    {
        return gyro;
    }
    public double getGyroValue()
    {
        return gyro.getAngle();
    }
    public void resetGyro()
    {
        gyro.reset();
    }
    /**
     * Only to be used while controlled by PID controller
     */
    public void setMagnitude(double magnitude)
    {
        this.magnitude = magnitude;
    }
    /**
     * Only to be used while controlled by PID controller
     */
    public void setDirection(double direction)
    {
        this.direction = direction;
    }
    /**
     * Only to be used while controlled by PID controller
     */
    public void setAngle(double angle)
    {
        this.angle = angle;
    }
    /**
     * Needs to be enabled. Make sure to disable when done. Set magnitude and
     * direction with setMagnitude and setDirection.
     */
    public PIDController getAngleGyroController()
    {
        return angleGyroController;
    }
    public class AnglePIDOutput implements PIDOutput
    {
        public void pidWrite(double d)
        {
            setAngle(d);
            holonomicDrive.mecanumDrive_Polar(magnitude, direction, angle);
        }
    }
    public class PowerPIDOutput implements PIDOutput
    {
        public void pidWrite(double d)
        {
            setMagnitude(d);
            holonomicDrive.mecanumDrive_Polar(magnitude, direction, angle);
        }
    }
}
