// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc3824.CompetitionRobot.subsystems;
import org.usfirst.frc3824.CompetitionRobot.RobotMap;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc3824.CompetitionRobot.Constants;
import org.usfirst.frc3824.CompetitionRobot.Robot;
/**
 *
 */
public class ShooterAngleAdjustPID extends PIDSubsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    AnalogChannel shooterAnglePID = RobotMap.shooterAngleAdjustPIDShooterAnglePID;
    SpeedController angleMotorPID = RobotMap.shooterAngleAdjustPIDAngleMotorPID;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // Initialize your subsystem here
    public ShooterAngleAdjustPID() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("ShooterAngleAdjustPID", 8.0, 0.0, 0.0);
        setAbsoluteTolerance(0.01);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("Shooter Angle Adjust PID", "PIDSubsystem Controller", getPIDController());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;
        //SmartDashboard.putNumber("ShooterPosition", Robot.shooterAngleAdjustPID.getPosition());
        
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return shooterAnglePID.getAverageVoltage();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }
    
    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);
        
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        angleMotorPID.pidWrite(output);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        SmartDashboard.putNumber("ShooterDrive", output);
    }
    
    public AnalogChannel getPotentiometer()
    {
        return shooterAnglePID;
    }
    
    public void setTargetAngle(double inputAngle)
    {
        setSetpoint(convertAngleToVolts(limitAngle(inputAngle)));
    }
    
    public double getTargetAngle()
    {
        return convertVoltsToAngle(this.getSetpoint());
    }
    
    public double getCurrentAngle()
    {
        return convertVoltsToAngle(this.getPosition());
    }
    
    private double limitAngle(double inputAngle)
    {
        double outputAngle = inputAngle;
        
        if (inputAngle > Constants.SHOOTER_ANGLE_MAX_VALUE)
                outputAngle = Constants.SHOOTER_ANGLE_MAX_VALUE;
        if (inputAngle < Constants.SHOOTER_ANGLE_MIN_VALUE)
                outputAngle = Constants.SHOOTER_ANGLE_MIN_VALUE;
        
        return outputAngle;
    }
    
    private double convertAngleToVolts(double inputAngle)
    {
        double volts;
     
        // Convert the requested angle into a voltage in the range 0-5V
        //  The voltage is what the PID requires.
        volts = ((inputAngle - Constants.SHOOTER_ANGLE_MIN_VALUE) / (Constants.SHOOTER_ANGLE_MAX_VALUE - Constants.SHOOTER_ANGLE_MIN_VALUE)) * 5.0;

        return volts;
    }
    
    private double convertVoltsToAngle(double inputVolts)
    {
        double angle;
        
        angle = (inputVolts * (Constants.SHOOTER_ANGLE_MAX_VALUE - Constants.SHOOTER_ANGLE_MIN_VALUE)) / 5.0 + Constants.SHOOTER_ANGLE_MIN_VALUE;
        
        return angle;
    }

}
